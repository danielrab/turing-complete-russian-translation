

$15326252036920* До сих пор только код влиял на память, теперь память должна влиять на код. С добавлением условной логики, наш компьютер теперь может выполнить любой алгоритм и вычислить всё что вычислимо.
$16583885726240* Да, ты это сделал! Я думал ты был всего лишь странно выглядящей лысой обезьяной, но ты построил настоящий компьютер! Замечательно!
$10510746154639* На 1-ом такте программа должна загрузить адрес 1.
$10317244906317* Программа не найдена.
$14587485007736* До этого момента все программы ограничивались выполнением байт за байтом.
$19649119273248*
Последняя вещь которую нам нужно добавить это механизм для изменения текущего значения счётчика через [INSTRUCTIONS] когда определённые условия были достигнуты.

Когда два старших бита - [ON][ON], мы в режиме условий. В этом режиме, значение РЕГ 3 проверяется на условие заданное тремя младшими битами инструкции. Если условие выполняется, мы записываем значение РЕГ 0 в счётчик.
Условное изменение счётчика означает что мы можем пропускать [INSTRUCTIONS] основываясь на условиях или запускать [INSTRUCTIONS] в цикле.

Условия:
[OFF] [OFF] [OFF] Никогда
[OFF] [OFF] [ON] Если [color=#e49f44]РЕГ 3[/color] = 0
[OFF] [ON] [OFF] Если [color=#e49f44]РЕГ 3[/color] < 0
[OFF] [ON] [ON] Если [color=#e49f44]РЕГ 3[/color] ≤ 0 
[ON] [OFF] [OFF] Всегда
[ON] [OFF] [ON] Если [color=#e49f44]РЕГ 3[/color] ≠ 0 
[ON] [ON] [OFF] Если [color=#e49f44]РЕГ 3[/color] ≥ 0
[ON] [ON] [ON] Если [color=#e49f44]РЕГ 3[/color] > 0

Эти условия соответствуют компоненту условий который был сохранён в завод компонентов.


